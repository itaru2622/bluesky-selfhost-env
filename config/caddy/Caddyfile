#
# this mapping rules are converted into Caddyfile from traefik rules of https://github.com/ikuradon/atproto-starter-kit/blob/main/compose.yaml
# cf. https://caddyserver.com/docs/caddyfile
#
# global options: starts >>>>
{
        email {$EMAIL4CERTS}
#	debug
        on_demand_tls {
          ask http://caddy-sidecar:80
        }
#    limits to HTTP/1.1 >>>
        servers  {
          protocols  h1
        }
#    limits to HTTP/1.1 <<<
}

# https://caddy.community/t/how-can-i-allow-multiple-domain-origins-in-cors/22129/5
(cors) {
    @cors_preflight {
        method OPTIONS
    }
    @corsOrigin {
        header_regexp Origin ^https?://*.({$DOMAIN})$
    }
    @corsOriginAllowed {
        header_regexp Origin ^https?://(.*\.{$DOMAIN}|bsky\.app)$
    }
    handle @cors_preflight {
        header {
            Access-Control-Allow-Origin {http.request.header.Origin}
            Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE"
            Access-Control-Allow-Headers "Authorization, Content-Type, atproto-accept-labelers, atproto-proxy, x-bsky-topics"
            Vary Origin
            defer
        }
        respond "" 204
    }

    handle @corsOriginAllowed {
        header {
            Access-Control-Allow-Origin {http.request.header.Origin}
            Access-Control-Allow-Headers "Authorization, Content-Type, atproto-accept-labelers, atproto-proxy, x-bsky-topics"
            Access-Control-Expose-Headers *
            Vary Origin
            defer
        }
    }
}

# global options: ends   <<<<

# self-hosting CA with ACME,  for self signed certicates >>>>
#   accessible as https://ca.DOMAIN:9000/acme/local/directory
#   cf. https://blog.kurokobo.com/archives/3669#Caddy_acme_server
#
#ca.{$DOMAIN}:9000 {
#	tls internal
#	acme_server
#}
# self-hosting CA with ACME,  for self signed certicates <<<<

# starts; reverse proxying rules >>>>>
#
#  FQDN_FOR_OUTER {
#	tls internal(for self-signed) | your@email.address(for public-signed) {
#         on_demand
#       }
#       reverse_proxy http://container:port
# }

# starts: to check if sidecar working, this record maybe need just for debugging. >>>>
#caddy-sidecar.{$DOMAIN} {
#       import cors
#	tls {$EMAIL4CERTS} {
#	  on_demand
#       }
#	reverse_proxy http://caddy-sidecar:80
#}
# ends: to check if sidecar working, this record maybe need just for debugging. <<<<

# starts: to check if caddy works as reverse proxy, for HTTP(S) and WS(S) >>>>>>>>>>
#  for HTTPS/WSS => HTTP/WS, you can test websocket by ```wscat -c wss://test-wss.mybluesky.local.com/ws```
test-wss.{$DOMAIN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }

	@ws {
		header Connection *Upgrade*
		header Upgrade websocket
	}

	reverse_proxy @ws http://test-wss:8080
	reverse_proxy http://test-wss:8080

}

#  for HTTP/WS => HTTP/WS, you can test websocket by ```wscat -c ws://test-ws.mybluesky.local.com/ws```
http://test-ws.{$DOMAIN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	@ws {
		header Connection *Upgrade*
		header Upgrade websocket
	}

	reverse_proxy @ws http://test-ws:8080
	reverse_proxy http://test-ws:8080
}

# ends: to check if caddy works as reverse proxy, for HTTP(S) and WS(S) <<<<<<<<<<

# starts: simple mapping >>>>>

{$plcFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://plc:2582
}

{$bgsFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bgs:2470
}

api.{$DOMAIN}, {$bskyFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bsky:2584
}

{$socialappFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://social-app:8100
}

{$ozoneFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
#	reverse_proxy http://ozone:3000
	reverse_proxy http://ozone-standalone:3000
}
ozone-standalone.{$DOMAIN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://ozone-standalone:3000
}


{$palomarFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://palomar:3999
}

{$feedgenFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://feed-generator:3000
}

{$jetstreamFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://jetstream:6008
}

{$pdsFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }

        @ws {
          header Connection *Upgrade*
          header Upgrade websocket
        }

        reverse_proxy @ws http://pds:2583
        reverse_proxy     http://pds:2583

}
# ends:  simple mapping <<<<<

# starts:  *.pdsFQDN (pds.DOMAIN) >>>>>>>>>>>
*.{$pdsFQDN} {
        import cors
        tls {$EMAIL4CERTS} {
          on_demand
        }
#  it needs both of header_regexp and path_regexp with rewrite then reverse_proxy.
#---------------
#      websocket
        @ws {
          header Connection *Upgrade*
          header Upgrade websocket
          header_regexp host Host ^(.*)\.{$pdsFQDN}$
	  path_regexp   path      ^(.*)
        }
        rewrite       @ws           {http.regexp.path.1}
        reverse_proxy @ws           http://pds:2583

#---------------
#      *.pdsFQDN/xrpc*  => http://pds:2583
        @xrpc {
            header_regexp host Host ^(.*)\.{$pdsFQDN}$
            path_regexp   path      ^(/xrpc.*)
        }
        rewrite        @xrpc        {http.regexp.path.1}
        reverse_proxy  @xrpc        http://pds:2583

#---------------
#      *.pdsFQDN/.well-known* => http://pds:2583
        @wellknown {
            header_regexp host Host ^(.*)\.{$pdsFQDN}$
            path_regexp   path      ^(/\.well-known.*)
        }
        rewrite        @wellknown   {http.regexp.path.1}
        reverse_proxy  @wellknown   http://pds:2583


#---------------
#      *.pdsFQDN/robots.txt* => http://pds:2583
        @robots {
            header_regexp host Host ^(.*)\.{$pdsFQDN}$
            path_regexp   path      ^(/robots\.txt*)
        }
        rewrite        @robots      {http.regexp.path.1}
        reverse_proxy  @robots      http://pds:2583

#---------------
#     (.*).pdsFQDN/(.*) => http://social-app:8100/profile/$$1/$$2
        @others {
            header_regexp host Host ^(.*)\.{$pdsFQDN}$
            path_regexp   path      ^(.*)
        }
        rewrite        @others      /profile/{http.regexp.host.1}{http.regexp.path.1}
        reverse_proxy  @others      http://social-app:8100
}
# ends: *.pdsFQDN <<<<<<<<<<<

# starts: additional (long FQDN) >>>>>>>>>

# for ATP_APPVIEW_HOST=https://public.api.bsky.app in https://github.com/bluesky-social/social-app/blob/main/bskyweb/example.env
# for https://github.com/bluesky-social/bsky-docs/issues/63
{$publicApiFQDN} {
        import cors
	tls {$EMAIL4CERTS} {
          on_demand
        }
#       temporal support of no-auth API call, fill secrets.
	reverse_proxy http://admin:{$BSKY_ADMIN_PASSWORDS}@bsky:2584
}
# ends: additional (long FQDN)   <<<<<<<<<
